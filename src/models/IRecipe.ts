

export interface IRecipe {

    recipe_id: number;
    created_timestamp?: string;
    modified_timestamp?: string;

    recipe_name: string;
    recipe_description: string | null;
    recipe_type_id: number | null;
    product_type_id: number | null;
    recipe_status_id: number | null;
    recipe_uom_id: number | null;
    version: number;
    effective_from_date?: string | null;
    effective_to_date?: string | null;
    is_current: boolean;
    previous_recipe_id: number | null;
    notes: string | null;
    version_notes: string | null;
    recipe_quantity: string | number;
    yield_percentage: string | number;

    //  note - not nesting in related data (product type, recipe type, uom etc) to simplify the API calls
}

export const createEmptyRecipe = (): IRecipe => {
    return {
        // ID and timestamps are undefined as they are generated by the backend
        recipe_id: 0,  // recipe ID 0 - follow convention used in other forms to identify when a form contains a new item vs. an item being edited
        recipe_name: '',
        recipe_description: '',

        // Foreign keys are all set to default values to prevent type checking errors with API.  todo - add front end logic in form to flag up fields still set to default
        recipe_type_id: 1,
        product_type_id: 1,
        recipe_status_id: 1,
        recipe_uom_id: 1,

        version: 1,
        is_current: true,

        created_timestamp: '',
        modified_timestamp: '',

        //  nullable fields
        effective_from_date: null,
        effective_to_date: null,
        previous_recipe_id: null,
        notes: null,
        version_notes: null,
        recipe_quantity: 1,
        yield_percentage: 100.0,

    };
};